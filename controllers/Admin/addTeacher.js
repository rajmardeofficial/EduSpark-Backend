const bcrypt = require("bcrypt");
const generateStrongPassword = require("../../utils/passwordGenerator");
const { sendMail } = require("../../utils/mailer");
const TeacherCollege = require("../../models/userModel/teacher/teacherTypeModel/TeacherCollegeSchema");
const TeacherSchool = require("../../models/userModel/teacher/teacherTypeModel/TeacherSchoolSchema");
const TeacherJrCollege = require("../../models/userModel/teacher/teacherTypeModel/TeacherJrCollegeSchema");

const addTeacher = async (req, res) => {
  console.log(req.body);
  try {
    const {
      phoneNum,
      email,
    } = req.body;

    const roleType = req.params.roletype; // Accessing roleType from req.params

    console.log(roleType); // Log the roleType to verify

    let TeacherModel;

    // Determine the appropriate Teacher model based on the roleType
    switch (roleType) {
      case "College":
        TeacherModel = TeacherCollege;
        break;
      case "School":
        TeacherModel = TeacherSchool;
        break;
      case "JrCollege":
        TeacherModel = TeacherJrCollege;
        break; 
      default:
        return res.status(400).json({ message: "Invalid role type" });
    }

    // Check if the Teacher already exists
    const existingTeacher = await TeacherModel.findOne({ email });
    if (existingTeacher) {
      return res
        .status(400)
        .json({ message: "Teacher already exists with the email" });
    }

    // Create autogenerated password for teacher
    const autoGeneratedPassword = generateStrongPassword();
    const hashedPassword = await bcrypt.hash(autoGeneratedPassword, 10);

    // Create a new teacher instance
    const newTeacher = new TeacherModel({
      phone: phoneNum,
      password: hashedPassword,
      ...req.body,
    });
    console.log("hello",newTeacher);

    // Handle the teaching array dynamically based on the teacher type
    // switch (roleType) {
    //   case "College":
    //     newTeacher.teaching = teaching.map((item) => ({
    //       course: item.course,
    //       branch: item.branch,
    //       class: item.class,
    //       semester: item.semester,
    //       subject: item.subject,
    //     }));
    //     break;
    //   case "School":
    //     newTeacher.teaching = teaching.map((item) => ({
    //       class: item.class,
    //       subject: item.subject,
    //     }));
    //     break;
    //   case "JrCollege":
    //     newTeacher.teaching = teaching.map((item) => ({
    //       course: item.course,
    //       branch: item.branch,
    //       class: item.class,
    //       subject: item.subject,
    //     }));
    //     break;
    //   default:
    //     break;
    // }

    // Save the new Teacher to the database
    await newTeacher.save();

    // Send Password credentials via mail to teacher
    await sendMail(
      email,
      "Subject",
      `Your password is ${autoGeneratedPassword}`
    );

    res.status(201).json({ message: "Teacher added successfully" });
  } catch (error) {
    console.error("Error adding teacher:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};

module.exports = addTeacher;
